name: Release package version
description: Release package version based on package.json

inputs:
  draft:
    type: boolean
    default: false
    description: "Draft release"
  prerelease:
    type: boolean
    default: false
    description: "Prerelease release"
  token:
    type: string

runs:
  using: "composite"
  steps:
    # Set up Node.js
    - uses: actions/setup-node@v4
      with:
        node-version: '22.x'

    # Check if package.json version has changed
    - name: Get current version
      id: get_version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      shell: bash

      # Get current branch name
    - name: Get current branch name
      id: get_branch
      run: echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
      shell: bash

    # - name: Check if version tag changed
    #   id: version_check
    #   run: |
    #     VERSION=${{ steps.get_version.outputs.version }}
    #     git fetch --tags
    #     if git rev-parse "v$VERSION" >/dev/null 2>&1; then
    #       echo "Tag v$VERSION changed."
    #       echo "changed=false" >> $GITHUB_OUTPUT
    #     else
    #       echo "Tag v$VERSION does not exist."
    #       echo "changed=true" >> $GITHUB_OUTPUT
    #     fi
    #   shell: bash

    # - name: Stop if version has not changed
    #   if: steps.version_check.outputs.changed == 'false'
    #   run: echo "Version has not changed, stopping job."
    #   shell: bash

    # - name: Collect release info from main repo
    #   if: steps.version_check.outputs.changed == 'true'
    #   run: |
    #     git clone --branch ${{ steps.get_branch.outputs.branch }} https://github.com/revolist/revogrid.git main-repo
    #     cd main-repo
    #     git fetch --tags
    #     git checkout "v${{ steps.get_version.outputs.version }}"
    #   shell: bash

    # - name: Create GitHub release
    #   if: steps.version_check.outputs.changed == 'true'
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ inputs.token }}
    #   with:
    #     tag_name: v${{ steps.get_version.outputs.version }}
    #     release_name: Release ${{ steps.get_version.outputs.version }}
    #     draft: ${{ inputs.draft }}
    #     prerelease: ${{ inputs.prerelease }}
    #     body_path: main-repo/CHANGELOG.md

    - name: Install GitHub CLI
        run: sudo apt-get install -y gh

    - name: Fetch specific release info from revolist/revogrid
      id: fetch_release
      run: |
        TAG_NAME="v${{ steps.get_version.outputs.version }}"
        RELEASE_INFO=$(gh release view "$TAG_NAME" --repo revolist/revogrid --json tagName,body -q ".tagName + \"\n\" + .body")
        TAG_NAME=$(echo "$RELEASE_INFO" | head -n 1)
        RELEASE_BODY=$(echo "$RELEASE_INFO" | tail -n +2)
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        echo "RELEASE_BODY=$RELEASE_BODY"
        echo "RELEASE_BODY=$RELEASE_BODY" >> $GITHUB_ENV


          
